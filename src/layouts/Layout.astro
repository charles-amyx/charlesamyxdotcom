---
interface Props {
  title: string;
  description?: string;
  ogImage?: string;
  ogType?: string;
  schema?: object; // Add this to allow passing custom schema per page
}

const {
  title,
  description = "Portfolio and work by Charles Amyx - Front End Developer and UI Designer",
  ogImage = "/images/og-image.jpg",
  ogType = "website",
  schema,
} = Astro.props;

import Header from "../components/Header.astro";
import Footer from "../components/Footer.astro";
import "../styles/global.css";
import "../styles/card.css";
import AlpineInit from "../components/AlpineInit.astro";

// Base website schema that's present on all pages
const websiteSchema = {
  "@context": "https://schema.org",
  "@type": "WebSite",
  name: "Charles E. Amyx, III Portfolio",
  url: "https://charlesamyx.com",
  description:
    "Portfolio and work by Charles E. Amyx, III - Front End Developer and UI Designer",
};

// Person schema for yourself
const personSchema = {
  "@context": "https://schema.org",
  "@type": "Person",
  name: "Charles E. Amyx, III",
  url: "https://charlesamyx.com",
  image: "https://charlesamyx.com/images/charles_amyx.jpg",
  sameAs: [
    "https://github.com/charles-amyx",
    "https://www.linkedin.com/in/charbot/",
    // Add other social profile URLs
  ],
  jobTitle: "Front End Developer",
  description: "Front End Developer and Designer",
  knowsAbout: [
    "JavaScript",
    "React",
    "UI Design",
    "Accessibility",
    "Typescript",
    "HTML",
    "CSS",
    "TailwindCSS",
    "VueJS",
    "Astro",
    "Svelte",
    "NextJS",
    // Add other skills
  ],
};

// Combine schemas - if a page-specific schema is provided, include it
const schemas = schema
  ? [websiteSchema, personSchema, schema]
  : [websiteSchema, personSchema];
---

<!doctype html>
<html lang="en" transition:animate="fade">
  <head>
    <!-- Google tag (gtag.js) -->
    <script
      async
      src="https://www.googletagmanager.com/gtag/js?id=G-E09NMKMEBG"
      is:inline></script>
    <script is:inline>
      // Define types for Google Analytics
      window.dataLayer = window.dataLayer || [];
      function gtag() {
        window.dataLayer.push(arguments);
      }
      gtag("js", new Date());
      gtag("config", "G-E09NMKMEBG");
    </script>
    <meta charset="UTF-8" />
    <meta name="description" content={description} />
    <meta name="viewport" content="width=device-width" />
    <link rel="icon" type="image/svg+xml" href="/favicon.svg" />
    <meta name="generator" content={Astro.generator} />
    <title>{title}</title>

    <script is:inline>
      // On page load or when changing themes, best to add inline in `head` to avoid FOUC
      // if (
      //   localStorage.theme === "dark" ||
      //   (!("theme" in localStorage) &&
      //     window.matchMedia("(prefers-color-scheme: dark)").matches)
      // ) {
      //   document.documentElement.classList.add("dark");
      // } else {
      //   document.documentElement.classList.remove("dark");
      // }
    </script>
    <style is:global>
      @import "../styles/fonts.css";
      /* Swup fade transition */
      .transition-fade {
        transition: 0.25s;
        opacity: 1;
      }
      html.is-animating .transition-fade {
        opacity: 0;
      }

      html,
      body {
        height: 100%;
      }

      body {
        display: flex;
        flex-direction: column;
      }

      main {
        flex: 1 0 auto;
      }

      footer {
        flex-shrink: 0;
        @apply hidden md:block;
      }

      /* Add to existing styles */
      .loading {
        cursor: wait;
      }

      /* Optimize paint performance */
      .card-image {
        transform: translateZ(0);
        backface-visibility: hidden;
        will-change: transform;
      }

      /* Optimize transitions */
      ::view-transition-old(root),
      ::view-transition-new(root) {
        animation: none;
        mix-blend-mode: normal;
      }

      /* Smooth transition styles */
      .fade-in {
        view-transition-name: fade;
      }

      @keyframes fade-in {
        from {
          opacity: 0;
        }
        to {
          opacity: 1;
        }
      }

      @keyframes slide-from-right {
        from {
          transform: translateX(30px);
          opacity: 0;
        }
        to {
          transform: translateX(0);
          opacity: 1;
        }
      }

      /* View transition styles */
      ::view-transition-old(fade) {
        animation: fade-out 0.2s ease-out both;
      }

      ::view-transition-new(fade) {
        animation: fade-in 0.3s ease-out 0.1s both;
      }

      /* Optional: Add a subtle loading indicator */
      .loading-indicator {
        position: fixed;
        top: 0;
        left: 0;
        width: 100%;
        height: 2px;
        background: var(--accent-color, #0000ff);
        transform: scaleX(0);
        transform-origin: left;
      }

      .loading .loading-indicator {
        animation: loading 1s ease-in-out infinite;
      }

      @keyframes loading {
        0% {
          transform: scaleX(0);
          opacity: 1;
        }
        50% {
          transform: scaleX(1);
          opacity: 0.5;
        }
        100% {
          transform: scaleX(0);
          opacity: 1;
        }
      }

      /* Prevent content overlap during transitions */
      ::view-transition-group(*) {
        animation: none !important;
      }

      ::view-transition-old(*) {
        animation: fade-out 0.2s ease-out both !important;
      }

      ::view-transition-new(*) {
        animation: fade-in 0.2s ease-out both !important;
      }

      @keyframes fade-out {
        from {
          opacity: 1;
        }
        to {
          opacity: 0;
        }
      }

      @keyframes fade-in {
        from {
          opacity: 0;
        }
        to {
          opacity: 1;
        }
      }

      /* Ensure old content is removed quickly */
      ::view-transition-old(root) {
        animation-duration: 0.15s !important;
      }

      /* Ensure new content only appears after old content is gone */
      ::view-transition-new(root) {
        animation-delay: 0.1s !important;
      }

      /* Optional: Add a subtle loading indicator */
      .loading-indicator {
        position: fixed;
        top: 0;
        left: 0;
        width: 100%;
        height: 2px;
        background: var(--accent-color, #0000ff);
        transform: scaleX(0);
        transform-origin: left;
        z-index: 100;
      }

      html.loading .loading-indicator {
        animation: progress 0.4s ease-in-out forwards;
      }

      @keyframes progress {
        0% {
          transform: scaleX(0);
        }
        100% {
          transform: scaleX(1);
        }
      }

      /* Replace the fade animations with slide animations */
      ::view-transition-old(root) {
        animation: slide-out 0.15s ease-out both !important;
      }

      ::view-transition-new(root) {
        animation: slide-in 0.2s ease-out 0.1s both !important;
      }

      @keyframes slide-out {
        from {
          opacity: 1;
          transform: translateY(0);
        }
        to {
          opacity: 0;
          transform: translateY(-10px);
        }
      }

      @keyframes slide-in {
        from {
          opacity: 0;
          transform: translateY(10px);
        }
        to {
          opacity: 1;
          transform: translateY(0);
        }
      }
    </style>

    <!-- Open Graph / Facebook -->
    <meta property="og:type" content={ogType} />
    <meta property="og:url" content={Astro.url} />
    <meta property="og:title" content={title} />
    <meta property="og:description" content={description} />
    <meta property="og:image" content={new URL(ogImage, Astro.url)} />

    <!-- Twitter -->
    <meta property="twitter:card" content="summary_large_image" />
    <meta property="twitter:url" content={Astro.url} />
    <meta property="twitter:title" content={title} />
    <meta property="twitter:description" content={description} />
    <meta property="twitter:image" content={new URL(ogImage, Astro.url)} />

    <!-- JSON-LD Structured Data -->
    <script
      type="application/ld+json"
      is:inline
      set:html={JSON.stringify(schemas)}
    />
    <meta name="format-detection" content="telephone=no" />
    <AlpineInit />
  </head>
  <body class="font-neue bg-background h-full text-text antialiased">
    <div class="loading-indicator"></div>
    <div class="fade-in">
      <Header />
      <main
        id="swup"
        class="flex-grow text-text transition-fade bg-[url('/images/dark-topo.svg')] bg-no-repeat bg-bottom bg-contain pb-20 md:pb-0"
      >
        <slot />
      </main>
      <Footer />
    </div>
  </body>
</html>

<script>
  // Handle transition states
  document.addEventListener("astro:before-swap", () => {
    document.documentElement.classList.add("loading");
  });

  document.addEventListener("astro:after-swap", () => {
    document.documentElement.classList.remove("loading");
  });
</script>
