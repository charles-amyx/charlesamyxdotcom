---
interface Props {
  title: string;
  description?: string;
  ogImage?: string;
  ogType?: string;
  schema?: object; // Add this to allow passing custom schema per page
}

const {
  title,
  description = "Portfolio and work by Charles Amyx - Designer and frontend developer",
  ogImage = "/images/og-image.jpg",
  ogType = "website",
  schema,
} = Astro.props;

import Header from "../components/Header.astro";
import Footer from "../components/Footer.astro";
import "../styles/global.css";
import "../styles/card.css";
import AlpineInit from "../components/AlpineInit.astro";
import { ViewTransitions } from "astro:transitions";

// Base website schema that's present on all pages
const websiteSchema = {
  "@context": "https://schema.org",
  "@type": "WebSite",
  name: "Charles E. Amyx, III Portfolio",
  url: "https://charlesamyx.com",
  description:
    "Portfolio and work by Charles E. Amyx, III - Designer and frontend developer",
};

// Person schema for yourself
const personSchema = {
  "@context": "https://schema.org",
  "@type": "Person",
  name: "Charles E. Amyx, III",
  url: "https://charlesamyx.com",
  image: "https://charlesamyx.com/images/charles_amyx.jpg",
  sameAs: [
    "https://github.com/charles-amyx",
    "https://www.linkedin.com/in/charbot/",
    // Add other social profile URLs
  ],
  jobTitle: "Designer and frontend developer",
  description: "Designer and frontend developer",
  knowsAbout: [
    "JavaScript",
    "React",
    "UI Design",
    "Accessibility",
    "Typescript",
    "HTML",
    "CSS",
    "TailwindCSS",
    "VueJS",
    "Astro",
    "Svelte",
    "NextJS",
    // Add other skills
  ],
};

// Combine schemas - if a page-specific schema is provided, include it
const schemas = schema
  ? [websiteSchema, personSchema, schema]
  : [websiteSchema, personSchema];

// Add navLinks definition
const navLinks = [
  { href: "/", label: "Home" },
  { href: "/work", label: "Work" },
  { href: "/resume", label: "Résumé" },
  { href: "/about", label: "About" },
];

const currentPath = Astro.url.pathname;

const isActive = (href: string) => {
  const pathSegments = currentPath.split("/").filter(Boolean);
  const firstSegment = pathSegments[0] || "";

  if (href === "/") {
    return false;
  }

  if (href === "/work") {
    return firstSegment === "work";
  }

  if (href === "/about") {
    return firstSegment === "about" || firstSegment === "side-projects";
  }

  const hrefSegment = href.split("/").filter(Boolean)[0];
  return hrefSegment === firstSegment;
};
---

<!doctype html>
<html lang="en">
  <head>
    <ViewTransitions fallback="animate" />
    <script>
      // Add crossorigin to all preloaded scripts
      document.addEventListener("astro:before-preparation", () => {
        document
          .querySelectorAll('link[rel="preload"][as="script"]')
          .forEach((link) => {
            if (!link.hasAttribute("crossorigin")) {
              link.setAttribute("crossorigin", "anonymous");
            }
          });
      });
    </script>
    <!-- Google tag (gtag.js) -->
    <script
      async
      src="https://www.googletagmanager.com/gtag/js?id=G-E09NMKMEBG"
      is:inline></script>
    <script is:inline>
      // Define types for Google Analytics
      window.dataLayer = window.dataLayer || [];
      function gtag() {
        window.dataLayer.push(arguments);
      }
      gtag("js", new Date());
      gtag("config", "G-E09NMKMEBG");
    </script>
    <meta charset="UTF-8" />
    <meta name="description" content={description} />
    <meta
      name="viewport"
      content="width=device-width, initial-scale=1, viewport-fit=cover"
    />
    <link rel="icon" type="image/svg+xml" href="/favicon.svg" />
    <meta name="generator" content={Astro.generator} />
    <title>{title}</title>

    <style is:global>
      @import "../styles/fonts.css";

      html,
      body {
        height: 100%;
      }

      body {
        display: flex;
        flex-direction: column;
      }

      main {
        flex: 1 0 auto;
      }

      footer {
        flex-shrink: 0;
        @apply hidden md:block;
      }

      /* Add to existing styles */
      .loading {
        cursor: wait;
      }

      /* Optimize paint performance */
      .card-image {
        transform: translateZ(0);
        backface-visibility: hidden;
        will-change: transform;
      }

      /* Smooth transition styles */
      .fade-in {
        view-transition-name: fade;
      }

      @keyframes fade-in {
        from {
          opacity: 0;
        }
        to {
          opacity: 1;
        }
      }

      @keyframes slide-from-right {
        from {
          transform: translateX(30px);
          opacity: 0;
        }
        to {
          transform: translateX(0);
          opacity: 1;
        }
      }

      /* Optional: Add a subtle loading indicator */
      .loading-indicator {
        position: fixed;
        top: 0;
        left: 0;
        width: 100%;
        height: 2px;
        background: var(--accent-color, #0000ff);
        transform: scaleX(0);
        transform-origin: left;
      }

      .loading .loading-indicator {
        animation: loading 1s ease-in-out infinite;
      }

      @keyframes loading {
        0% {
          transform: scaleX(0);
          opacity: 1;
        }
        50% {
          transform: scaleX(1);
          opacity: 0.5;
        }
        100% {
          transform: scaleX(0);
          opacity: 1;
        }
      }

      /* Base view transition rules */
      ::view-transition-group(*) {
        animation: none !important;
      }

      /* Only animate main content */
      ::view-transition-old(main-content) {
        animation: fade-out 0.15s ease-out both !important;
      }

      ::view-transition-new(main-content) {
        animation: fade-in 0.15s ease-out both !important;
      }

      /* Explicitly prevent header and nav animations */
      header,
      nav,
      .view-transition-none {
        view-transition-name: none !important;
      }

      /* Define fade animations */
      @keyframes fade-in {
        from {
          opacity: 0;
        }
        to {
          opacity: 1;
        }
      }

      @keyframes fade-out {
        from {
          opacity: 1;
        }
        to {
          opacity: 0;
        }
      }

      :root {
        --animation-duration: 0.15s;
      }
    </style>

    <!-- Open Graph / Facebook -->
    <meta property="og:type" content={ogType} />
    <meta property="og:url" content={Astro.url} />
    <meta property="og:title" content={title} />
    <meta property="og:description" content={description} />
    <meta property="og:image" content={new URL(ogImage, Astro.url)} />

    <!-- Twitter -->
    <meta property="twitter:card" content="summary_large_image" />
    <meta property="twitter:url" content={Astro.url} />
    <meta property="twitter:title" content={title} />
    <meta property="twitter:description" content={description} />
    <meta property="twitter:image" content={new URL(ogImage, Astro.url)} />

    <!-- JSON-LD Structured Data -->
    <script
      type="application/ld+json"
      is:inline
      set:html={JSON.stringify(schemas)}
    />
    <meta name="format-detection" content="telephone=no" />
    <AlpineInit />
  </head>
  <body class="font-neue bg-background h-full text-text antialiased">
    <div class="loading-indicator"></div>
    <Header class="view-transition-none" />
    <main
      transition:animate="fade"
      style="view-transition-name: main-content;"
      class="flex-grow text-text transition-fade bg-[url('/images/dark-topo.svg')] bg-no-repeat bg-bottom bg-contain pb-20 md:pb-0"
    >
      <slot />
    </main>
    <Footer class="view-transition-none" />

    <!-- Mobile Navigation -->
    <div
      class="fixed w-full px-8 md:hidden view-transition-none"
      style="position: fixed !important; bottom: max(env(safe-area-inset-bottom, 24px), 24px); left: 50%; transform: translate(-50%, 0); z-index: 999999;"
    >
      <nav
        class="bg-solidMuted w-full rounded-full px-8 py-3 border border-text/15 shadow-xl shadow-accent/10"
      >
        <ul class="flex justify-between space-x-6">
          {
            navLinks.map((link) => (
              <li>
                <a
                  href={link.href}
                  class={`text-base font-medium transition-colors duration-300 ${
                    isActive(link.href)
                      ? "text-primary"
                      : "text-text hover:text-primary"
                  }`}
                >
                  {link.label}
                </a>
              </li>
            ))
          }
        </ul>
      </nav>
    </div>
  </body>
</html>

<script>
  // Handle transition states
  document.addEventListener("astro:before-swap", () => {
    document.documentElement.classList.add("loading");
  });

  document.addEventListener("astro:after-swap", () => {
    document.documentElement.classList.remove("loading");
  });
</script>
