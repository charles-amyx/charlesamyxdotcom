---
import Layout from "../layouts/Layout.astro";
import { getCollection } from "astro:content";
import { imageMap } from "../lib/images";
// import { initTopography } from '../lib/topographyAnimation';

const allProjects = await getCollection("projects");
const featuredProjects = allProjects
  .filter((project) => project.data.featured)
  .slice(0, 3);

const professionalSchema = {
  "@context": "https://schema.org",
  "@type": "ProfilePage",
  mainEntity: {
    "@type": "Person",
    name: "Charles E. Amyx, III",
    url: "https://charlesamyx.com",
    image: "https://charlesamyx.com/images/charles_amyx.jpg",
    sameAs: [
      "https://github.com/charles-amyx",
      "https://linkedin.com/in/charbot",
    ],
    jobTitle: "Designer and frontend developer",
    worksFor: {
      "@type": "Organization",
      name: "Ad Hoc LLC", // if applicable
    },
    skills: [
      "JavaScript",
      "React",
      "UI Design",
      "Accessibility",
      "Typescript",
      "HTML",
      "CSS",
      "TailwindCSS",
      "VueJS",
      "Astro",
      "Svelte",
      "NextJS",
      // Add other skills
    ],
  },
};
---

<Layout
  title="Charles E. Amyx, III - Designer and frontend developer"
  schema={professionalSchema}
>
  <section class="container transition-all duration-150 ease-in-out mx-auto px-4 pt-12 md:pt-16 lg:pt-24">
    <section
      class="mb-16 grid grid-cols-6 py-12 lg:py-24 xl:h-[70dvh] transition-all duration-200 ease-in-out relative"
    >
      <canvas 
        id="topographyCanvas" 
        class="absolute left-[50%] -translate-x-1/2 w-screen h-full opacity-[0.07] -z-10 transform-gpu md:scale-75 lg:scale-100"
      ></canvas>

      <h1
        class="text-4xl lg:text-right lg:text-6xl relative xl:text-8xl xl:leading-none transition-all duration-200 ease-in-out col-span-6 lg:col-span-5 text-text/90 font-extralight"
      >
        <span class="">Designer</span>
        <span class="text-primary">and</span> <span class="font-normal block">Frontend Developer</span>
      </h1>
    </section>

    <section class="mb-16 lg:mb-48 ">
      <div class="flex justify-between items-center mb-8">
        <h2
          class="text-2xl lg:ml-24 tracking-wide font-medium text-text/90 after:content-[''] after:block after:w-14 after:h-[2px] after:bg-accent after:mt-2 after:ml-auto"
        >
          Featured
        </h2>
        <a href="/work" class="text-primary custom-link hover:text-text inline-flex items-center gap-1 group transition-colors duration-200 ease-in-out">
          View all projects <span class="transform transition-transform group-hover:text-primary group-hover:translate-x-1">→</span>
        </a>

      </div>
      <div class="grid grid-cols-1 md:grid-cols-12" transition:persist>
        {
          featuredProjects.map((project) => {
            const imageModule = project.data.featuredImg
              ? imageMap[project.data.featuredImg]
              : undefined;
            if (!imageModule) return null;
            return (
              <a
                href={`/work/${project.slug}`}
                class="group col-span-12 lg:col-span-10 col-start-auto lg:col-start-2 flex justify-center transition-all duration-300 ease-in-out relative w-auto"
              >
                <div class="w-full mb-4 h-auto order-2 md:order-1 hidden lg:block z-10 left-0 xl:absolute rounded-xl lg:w-2/5 overflow-hidden">
                  <img
                    src={imageModule.src}
                    alt={project.data.title}
                    class="w-full h-full object-cover scale-105"
                  />
                </div>
                <div 
                  x-data="{ shown: false }" 
                  x-intersect="shown = true"
                  :class="shown ? 'opacity-100 translate-x-0' : 'opacity-0 translate-x-8'"
                  class="order-1 lg:max-w-[500px] md:order-2 lg:mt-12 relative z-20 lg:-ml-24 rounded-[1rem] bg-muted lg:bg-text/90 bg-blend-overlay lg:rounded-[2.5rem] p-8 lg:py-10 lg:px-12 transition-all duration-300 ease-out shadow-none group-hover:shadow-lg group-hover:shadow-accent/45 lg:group-hover:bg-text w-fit"
                >
                  <div class="flex flex-col h-full">
                    <h3 class="text-xl text-text/90 lg:text-background/90 font-semibold mb-4 lg:mb-2">
                      {project.data.title}
                    </h3>
                    <div class="block lg:hidden">
                      <img
                        src={imageModule.src}
                        alt={project.data.title}
                        class="w-full h-[200px] object-cover rounded-xl"
                      />
                    </div>
                    <p class="text-text/90 lg:text-background/90 mt-4 lg:mt-0 mb-6">{project.data.featuredDesc}</p>
                    <span class="text-accent mt-auto inline-flex items-center gap-1 lg:group-hover:text-background transition-colors duration-200 ease-in-out">
                      Check it out <span class="transform transition-transform group-hover:text-primary group-hover:translate-x-1">→</span>
                    </span>
                  </div>
                </div>
              </a>
            );
          })
        }
      </div>
    </section>

    <section class="grid grid-cols-1 md:grid-cols-12 py-12 lg:py-32">
      <div 
        x-data="{ shown: false }" 
        x-intersect="shown = true"
        :class="shown ? 'opacity-100 translate-x-0' : 'opacity-0 translate-x-[-2rem]'"
        class="col-span-1 md:col-span-4 col-start-auto md:col-start-8 transition-all duration-700 ease-out"
        transition:persist
      >
        <h2
          class="text-2xl tracking-wide w-fit font-medium text-text/90 after:content-[''] after:block after:w-14 after:h-[2px] after:bg-accent after:mt-2 after:ml-auto mb-4"
        >
          About Me
        </h2>
        <p class="text-lg text-text/90 mb-6">
          I'm a Senior Frontend Developer and UX Designer with over 15 years of
          experience in higher ed and corporate sectors. Based in Ann Arbor,
          Michigan, I specialize in creating engaging and user-friendly web
          experiences using modern technologies.
        </p>
        <div class="flex flex-col space-y-4">
          <a
            href="https://www.linkedin.com/in/charbot/"
            class="custom-link text-primary hover:text-text transition-colors inline-flex items-center gap-1 group"
            target="_blank"
            rel="noopener noreferrer"
          >
            LinkedIn <span class="transform transition-transform duration-200 ease-in-out group-hover:text-primary group-hover:translate-x-1">→</span>
          </a>
          <a
            href="https://github.com/charles-amyx"
            class="custom-link text-primary hover:text-text transition-colors inline-flex items-center gap-1 group"
            target="_blank"
            rel="noopener noreferrer"
          >
            GitHub <span class="transform transition-transform duration-200 ease-in-out group-hover:text-primary group-hover:translate-x-1">→</span>
          </a>
        </div>
      </div>
    </section>
  </section>
</Layout>

<script>
  // Initialize on page load with a slight delay
  document.addEventListener('astro:page-load', () => {
    requestAnimationFrame(() => {
      initTopography();
    });
  });

  function initTopography() {
    const canvas = document.getElementById('topographyCanvas') as HTMLCanvasElement;
    if (!canvas) return;
    
    const ctx = canvas.getContext('2d');
    if (!ctx) return;
    
    let time = 0;
    let animationFrameId: number;
    
    function resize() {
      if (!canvas) return;
      // Cancel any existing animation
      if (animationFrameId) {
        cancelAnimationFrame(animationFrameId);
      }
      // Update canvas dimensions
      canvas.width = window.innerWidth;
      canvas.height = canvas.offsetHeight;
      // Restart animation
      animate();
    }
    
    function animate() {
      if (!canvas || !ctx) return;
      
      ctx.clearRect(0, 0, canvas.width, canvas.height);
      
      // Draw multiple sine waves
      for (let i = 0; i < 5; i++) {
        ctx.beginPath();
        const opacity = 0.25 + (i * 0.35);
        ctx.strokeStyle = `rgba(238, 244, 246, ${opacity})`;
        ctx.lineWidth = 0.5 + (i * 0.2);
        
        const speedMultiplier = 1 + (i * 0.4);
        
        for (let x = 0; x < canvas.width; x++) {
          const y = Math.sin(x * 0.01 + (time * speedMultiplier) + i) * 20 + 
                   Math.sin(x * 0.02 + (time * 0.8 * speedMultiplier) + i) * 15 +
                   (canvas.height / 2) + (i * 50);
          
          if (x === 0) {
            ctx.moveTo(x, y);
          } else {
            ctx.lineTo(x, y);
          }
        }
        
        ctx.stroke();
      }
      
      time += 0.005;
      animationFrameId = requestAnimationFrame(animate);
    }
    
    // Add debounced resize listener
    let resizeTimeout: number;
    window.addEventListener('resize', () => {
      clearTimeout(resizeTimeout);
      resizeTimeout = setTimeout(resize, 100) as unknown as number;
    });
    
    resize(); // Initial setup
  }

  // Initialize on page load
  initTopography();
  
  // Reinitialize after navigation
  document.addEventListener('astro:after-swap', initTopography);

  document.addEventListener("astro:page-load", () => {
    const canvas = document.getElementById("topographyCanvas") as HTMLCanvasElement;
    if (!canvas) return;
    
    const ctx = canvas.getContext("2d");
    if (!ctx) return;

    // Set base canvas size
    const setCanvasSize = () => {
      // Get device pixel ratio for sharp rendering
      const dpr = window.devicePixelRatio || 1;
      
      // Set canvas dimensions based on container
      const width = canvas.offsetWidth;
      const height = canvas.offsetHeight;
      
      // Set display size
      canvas.style.width = width + "px";
      canvas.style.height = height + "px";
      
      // Set actual size in memory (scaled for retina)
      canvas.width = width * dpr;
      canvas.height = height * dpr;
      
      // Scale context to match device pixel ratio
      ctx.scale(dpr, dpr);
    };

    // Call on load and resize
    setCanvasSize();
    window.addEventListener("resize", setCanvasSize);

    // ... rest of your animation code ...
  });
</script>
