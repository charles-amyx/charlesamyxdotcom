---
import Layout from "../layouts/Layout.astro";
import { getCollection } from "astro:content";
import { imageMap } from "../lib/images";

const allProjects = await getCollection("projects");
const featuredProjects = allProjects
  .filter((project) => project.data.featured)
  .slice(0, 3);

const professionalSchema = {
  "@context": "https://schema.org",
  "@type": "ProfilePage",
  mainEntity: {
    "@type": "Person",
    name: "Charles E. Amyx, III",
    url: "https://charlesamyx.com",
    image: "https://charlesamyx.com/images/charles_amyx.jpg",
    sameAs: [
      "https://github.com/charles-amyx",
      "https://linkedin.com/in/charbot",
    ],
    jobTitle: "Front End Developer",
    worksFor: {
      "@type": "Organization",
      name: "Ad Hoc LLC", // if applicable
    },
    skills: [
      "JavaScript",
      "React",
      "UI Design",
      "Accessibility",
      "Typescript",
      "HTML",
      "CSS",
      "TailwindCSS",
      "VueJS",
      "Astro",
      "Svelte",
      "NextJS",
      // Add other skills
    ],
  },
};
---

<Layout
  title="Charles E. Amyx, III - Front End Developer"
  schema={professionalSchema}
>
  <section class="container mx-auto px-4 pt-12 md:pt-16 lg:pt-24">
    <section
      class="mb-16 grid grid-cols-6 py-12 lg:py-24 xl:h-[85dvh] transition-all duration-200 ease-in-out relative"
    >
      <canvas 
        id="topographyCanvas" 
        class="absolute inset-0 w-full h-full opacity-[0.07] -z-10"
      ></canvas>

      <h1
        class="text-4xl lg:text-right lg:text-6xl relative xl:text-8xl xl:leading-none transition-all duration-200 ease-in-out col-span-6 lg:col-span-5 text-gray-600 font-extralight"
      >
        <span class="block">Frontend Developer</span>
        <span class="text-accent lg:font-extralight font-medium">and</span> <span class="lg:font-extralight font-medium">UI Designer</span>
      </h1>
    </section>

    <section class="mb-16 lg:mb-48">
      <div class="flex justify-between items-center mb-8">
        <h2
          class="text-2xl lg:ml-24 tracking-wide font-bold text-gray-600 uppercase"
        >
          Featured
        </h2>
        <a href="/work" class="text-accent hover:underline">
          View all projects →
        </a>
      </div>
      <div class="grid grid-cols-1 md:grid-cols-12" transition:persist>
        {
          featuredProjects.map((project) => {
            const imageModule = project.data.featuredImg
              ? imageMap[project.data.featuredImg]
              : undefined;
            if (!imageModule) return null;
            return (
              <a
                href={`/work/${project.slug}`}
                class="group col-span-12 lg:col-span-10 col-start-auto lg:col-start-2 flex justify-center hover:opacity-90 transition-opacity relative"
              >
                <div class="w-full mb-4 h-auto order-2 md:order-1 hidden lg:block z-10 left-0 xl:absolute lg:w-2/5">
                  <img
                    src={imageModule.src}
                    alt={project.data.title}
                    class="w-full h-full object-cover"
                  />
                </div>
                <div 
                  x-data="{ shown: false }" 
                  x-intersect="shown = true"
                  :class="shown ? 'opacity-100 translate-x-0' : 'opacity-0 translate-x-8'"
                  class="order-1 lg:max-w-[500px] md:order-2 lg:mt-12 relative z-20 lg:-ml-24 bg-neutral p-8 lg:py-12 lg:px-16 transition-all duration-700 ease-out"
                >
                  <h3 class="text-xl font-semibold mb-4 lg:mb-2">
                    {project.data.title}
                  </h3>
                  <img
                    src={imageModule.src}
                    alt={project.data.title}
                    class="w-full h-[200px] object-cover block lg:hidden"
                  />
                  <p class="text-gray-700 mt-4 lg:mt-0">{project.data.featuredDesc}</p>
                  <span class="text-accent mt-2 inline-block group-hover:underline">
                    Check it out →
                  </span>
                </div>
              </a>
            );
          })
        }
      </div>
    </section>

    <section class="grid grid-cols-1 md:grid-cols-12 py-12 lg:py-32">
      <div 
        x-data="{ shown: false }" 
        x-intersect="shown = true"
        :class="shown ? 'opacity-100 translate-x-0' : 'opacity-0 translate-x-[-2rem]'"
        class="col-span-1 md:col-span-4 col-start-auto md:col-start-8 transition-all duration-700 ease-out"
        transition:persist
      >
        <h2
          class="text-2xl tracking-wide font-bold text-gray-600 uppercase mb-2"
        >
          About Me
        </h2>
        <p class="text-lg text-gray-700 mb-6">
          I'm a Senior Frontend Developer and UX Designer with over 15 years of
          experience in higher ed and corporate sectors. Based in Ann Arbor,
          Michigan, I specialize in creating engaging and user-friendly web
          experiences using modern technologies.
        </p>
        <div class="flex flex-col space-y-4">
          <a
            href="https://www.linkedin.com/in/charbot/"
            class="hover:text-primary text-accent transition-colors"
            target="_blank"
            rel="noopener noreferrer"
          >
            LinkedIn →
          </a>
          <a
            href="https://github.com/charles-amyx"
            class="text-accent hover:text-primary transition-colors"
            target="_blank"
            rel="noopener noreferrer"
          >
            GitHub →
          </a>
        </div>
      </div>
    </section>
  </section>
</Layout>

<script>
  function initializeObserver() {
    const observer = new IntersectionObserver(
      (entries) => {
        entries.forEach((entry) => {
          if (entry.isIntersecting) {
            entry.target.classList.remove("opacity-0", "translate-x-8");
          }
        });
      },
      { threshold: 0.1 }
    );

    // Function to start observing cards
    function observeCards() {
      document.querySelectorAll(".project-card").forEach((card) => {
        // First disconnect any existing observation
        observer.unobserve(card);
        // Reset the animation state
        card.classList.add("opacity-0", "translate-x-8");
        // Start observing again
        observer.observe(card);
      });
    }

    // Initial observation
    observeCards();
  }

  // Run on initial load
  initializeObserver();

  // Run after each navigation
  document.addEventListener("astro:after-swap", () => {
    // Small delay to ensure DOM is ready
    setTimeout(initializeObserver, 0);
  });

  function initTopography() {
    const canvas = document.getElementById('topographyCanvas') as HTMLCanvasElement;
    if (!canvas) return;
    
    const ctx = canvas.getContext('2d');
    if (!ctx) return;
    
    let time = 0;
    
    function resize() {
      if (!canvas) return;
      canvas.width = canvas.offsetWidth;
      canvas.height = canvas.offsetHeight;
    }
    
    function animate() {
      if (!canvas || !ctx) return;
      
      ctx.fillStyle = '#ffffff';
      ctx.fillRect(0, 0, canvas.width, canvas.height);
      
      // Draw multiple sine waves
      for (let i = 0; i < 5; i++) {
        ctx.beginPath();
        // Increased opacity range (0.25 to 0.35)
        const opacity = 0.25 + (i * 0.35);
        ctx.strokeStyle = `rgba(0, 0, 0, ${opacity})`;
        ctx.lineWidth = 0.5 + (i * 0.2);
        
        const speedMultiplier = 1 + (i * 0.4);
        
        for (let x = 0; x < canvas.width; x++) {
          const y = Math.sin(x * 0.01 + (time * speedMultiplier) + i) * 20 + 
                   Math.sin(x * 0.02 + (time * 0.8 * speedMultiplier) + i) * 15 +
                   (canvas.height / 2) + (i * 50);
          
          if (x === 0) {
            ctx.moveTo(x, y);
          } else {
            ctx.lineTo(x, y);
          }
        }
        
        ctx.stroke();
      }
      
      time += 0.005;
      requestAnimationFrame(animate);
    }
    
    window.addEventListener('resize', resize);
    resize();
    animate();
  }

  // Initialize on page load
  initTopography();
  
  // Reinitialize after navigation
  document.addEventListener('astro:after-swap', initTopography);
</script>
