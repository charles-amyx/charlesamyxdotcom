---
import { ViewTransitions } from "astro:transitions";

const navLinks = [
  { href: "/", label: "Home" },
  { href: "/work", label: "Work" },
  { href: "/resume", label: "Résumé" },
  { href: "/about", label: "About" },
];

const currentPath = Astro.url.pathname;

const isActive = (href: string) => {
  // Get the first segment of the current path
  const pathSegments = currentPath.split("/").filter(Boolean);
  const firstSegment = pathSegments[0] || "";

  // For home page - remove this special case
  if (href === "/") {
    return false; // Never mark home link as active
  }

  // For work section
  if (href === "/work") {
    return firstSegment === "work";
  }

  // For all other pages, match only the first segment
  const hrefSegment = href.split("/").filter(Boolean)[0];
  return hrefSegment === firstSegment;
};
---

<ViewTransitions />

<!-- mobile header -->
<header class="relative w-full" id="main-header">
  <div
    class="w-full mx-auto px-4 md:hidden container grid transition-all duration-300 ease-in-out grid-cols-1 pt-6 justify-between items-end relative after:content-[''] after:block after:absolute after:w-[calc(100%-2rem)] after:h-[2px] after:bg-primary after:bottom-0 after:left-1/2 after:-translate-x-1/2 after:z-0"
  >
    <a
      href="/"
      class="text-xl w-full font-variable font-variable-sm transition-all duration-150 ease-in-out block font-bold text-text border-b-2 pb-2 relative z-10 border-primary"
    >
      Charles <span class="text-primary">Amyx</span>
    </a>
  </div>

  <!-- Mobile Pill Navigation -->
  <div
    class="fixed bottom-6 left-1/2 -translate-x-1/2 md:hidden z-50"
    transition:persist="nav"
  >
    <nav
      class="bg-solidMuted rounded-full px-6 py-3 border border-text/15 shadow-xl shadow-accent/10"
    >
      <ul class="flex space-x-6">
        {
          navLinks.map((link) => (
            <li>
              <a
                href={link.href}
                class={`text-base font-medium transition-colors duration-300 ${
                  isActive(link.href)
                    ? "text-primary"
                    : "text-text hover:text-primary"
                }`}
              >
                {link.label}
              </a>
            </li>
          ))
        }
      </ul>
    </nav>
  </div>

  <!-- Desktop Menu -->
  <div
    class="hidden w-full mx-auto px-4 gap-6 md:grid transition-all duration-300 ease-in-out md:grid-cols-12 pt-6 justify-between items-end container relative after:content-[''] after:block after:absolute after:w-[calc(100%-2rem)] after:h-[2px] after:bg-tertiary after:bottom-0 after:left-1/2 after:-translate-x-1/2 after:z-0"
  >
    <a
      href="/"
      class="text-xl block transition-all font-variable font-variable-sm duration-150 ease-in-out col-span-3 text-text border-b-2 pb-1 relative z-10 border-primary hover:text-primary"
    >
      Charles <span class="text-primary">Amyx</span>
    </a>
    <nav class="col-span-8 w-full col-start-10">
      <ul class="grid grid-cols-4 gap-6 font-medium relative z-10">
        {
          navLinks.map((link) => (
            <li
              class="pb-2 border-b-2 transition-all duration-300 ease-in-out relative"
              data-nav-item
            >
              <a
                href={link.href}
                class="transition-all duration-300 ease-in-out block nav-link"
                data-nav-link
                data-active={isActive(link.href)}
              >
                {link.label}
              </a>
            </li>
          ))
        }
      </ul>
    </nav>
  </div>
</header>

<script>
  // At the top of your script
  declare global {
    interface Window {
      gtag: (...args: any[]) => void;
    }
  }

  // Then wrap gtag calls in a check
  const trackEvent = (eventName: string, eventParams: object) => {
    try {
      if (typeof window.gtag !== "undefined") {
        window.gtag("event", eventName, eventParams);
      }
    } catch (error) {
      console.error("Error tracking event:", error);
    }
  };

  document.addEventListener("astro:page-load", () => {
    const currentPath = window.location.pathname;
    const links = document.querySelectorAll("a[href]");

    links.forEach((link) => {
      const href = link.getAttribute("href");
      if (!href || link.classList.contains("custom-link")) return;

      // Reset all active states
      link.classList.remove("text-primary");
      link.classList.add("text-text", "hover:text-accent");

      // Check for active state
      if (href !== "/" && currentPath.startsWith(href)) {
        link.classList.add("text-primary");
        link.classList.remove("text-text", "hover:text-accent");
      }
    });

    const navLinks = document.querySelectorAll("nav a");

    // Move the cleanup return after all event listeners
    const cleanupFunctions: (() => void)[] = [];

    navLinks.forEach((link) => {
      const handler = () => {
        trackEvent("navigation_click", {
          event_category: "Navigation",
          event_label: link.textContent,
          page_location: window.location.pathname,
        });
      };
      link.addEventListener("click", handler);
      cleanupFunctions.push(() => link.removeEventListener("click", handler));
    });

    // Track project card clicks
    document.querySelectorAll(".project-card").forEach((card) => {
      card.addEventListener("click", () => {
        trackEvent("project_view", {
          event_category: "Projects",
          event_label:
            card.querySelector("h3")?.textContent ?? "Unknown Project",
        });
      });
    });

    // Track external project link clicks
    document.querySelectorAll("a[target='_blank']").forEach((link) => {
      link.addEventListener("click", () => {
        trackEvent("project_link_click", {
          event_category: "External Links",
          event_label: (link as HTMLAnchorElement).href,
          project_title: link.closest("article")?.querySelector("h1")
            ?.textContent,
        });
      });
    });

    // Track skill tag clicks/hovers
    document.querySelectorAll(".skill-tag").forEach((skill) => {
      skill.addEventListener("click", () => {
        trackEvent("skill_interaction", {
          event_category: "Resume",
          event_label: skill.textContent,
        });
      });
    });

    // Track time spent on resume section
    if (window.location.pathname === "/resume") {
      let startTime = Date.now();
      let totalTime = 0;

      document.addEventListener("visibilitychange", () => {
        if (document.hidden) {
          totalTime += Date.now() - startTime;
        } else {
          startTime = Date.now();
        }
      });

      window.addEventListener("beforeunload", () => {
        const finalTime = Math.round(
          (totalTime + (Date.now() - startTime)) / 1000
        );
        trackEvent("resume_time_spent", {
          event_category: "Engagement",
          event_label: "Resume View Duration",
          value: finalTime,
        });
      });
    }

    document
      .querySelectorAll<HTMLAnchorElement>(
        "a[href*='linkedin'], a[href*='github']"
      )
      .forEach((link) => {
        link.addEventListener("click", () => {
          trackEvent("social_click", {
            event_category: "Social Links",
            event_label: link.href,
            social_platform: link.href.includes("linkedin")
              ? "LinkedIn"
              : "GitHub",
          });
        });
      });

    let maxScroll = 0;

    function debounce(func: Function, wait: number) {
      let timeout: ReturnType<typeof setTimeout>;
      return function executedFunction(...args: any[]) {
        const later = () => {
          clearTimeout(timeout);
          func(...args);
        };
        clearTimeout(timeout);
        timeout = setTimeout(later, wait);
      };
    }

    const debouncedScroll = debounce(() => {
      const scrollPercent = Math.round(
        ((window.scrollY + window.innerHeight) /
          document.documentElement.scrollHeight) *
          100
      );
      if (scrollPercent > maxScroll) {
        maxScroll = scrollPercent;
        if (scrollPercent % 25 === 0) {
          trackEvent("scroll_depth", {
            event_category: "Engagement",
            event_label: `Scrolled ${scrollPercent}%`,
            page_location: window.location.pathname,
          });
        }
      }
    }, 100);

    window.addEventListener("scroll", debouncedScroll);

    // Move return statement to the end
    return () => cleanupFunctions.forEach((cleanup) => cleanup());
  });
</script>
